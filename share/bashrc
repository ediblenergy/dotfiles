# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

function ackip() {
    echo "ack '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b' $@" 1>&2
    ack '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b' $@
}

#via http://www.garron.me/en/go2linux/what-is-my-public-ip-command-line.html
function whatsmyip() {
    curl -s checkip.dyndns.org|sed -e 's/.*Current IP Address: //' -e 's/<.*$//'
}

function backup_dir() {
    dir=$1
    dest_dir=$2
    output_file=$( basename $dir )
    d=$( date +"%G-%m-%d" )
    usage="backup_dir DIR DEST_DIR"
    of="$output_file-$d"
    [[ $output_file = "" ]] && echo $usage && return 0;
    [[ $dir = "" ]] && echo $usage && return 0;
    sudo tar -zcf - $dir | openssl aes-256-cbc -salt -pass $3 -out "$dest_dir$of.tgz.asc";
    echo "$dest_dir$of.tgz.asc"
}
# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
#export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
alias scan_prereqs_dir='find -regextype egrep -regex \.*.p\(m\|l\) -print0 | xargs --null scan_prereqs --combine'
alias gbranch='git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3'
alias dvim="vim -c 'colors default'"
#http://stackoverflow.com/questions/2034799/how-to-truncate-long-matching-lines-returned-by-grep-or-ack
alias ick='ack --pager="less -R -S"'

alias apt_upgrade='sudo apt-get update && sudo apt-get upgrade'

#python virtualenv
[ -e ~/env/bin/activate ] && source ~/env/bin/activate
#perl5 local::lib
[ -e $HOME/perl5 ] && eval $( perl -I $HOME/perl5/lib/perl5 -Mlocal::lib=--deactivate ) &&  eval $( perl -I $HOME/perl5/lib/perl5 -Mlocal::lib )

export TERM=screen-256color
export EDITOR=vim
export HISTCONTROL=ignorespace
export DBIC_TRACE_PROFILE=console
export HISTFILESIZE=300000
export HISTSIZE=300000
export HISTTIMEFORMAT='%F %T '
export NOPASTE_SERVICES=Shadowcat
export DISTAR_INIT_AUTHOR=sam@socialflow.com
export LANG=en_US.UTF-8
export PATH=$HOME/bin:$HOME/dotfiles/home_bin:$PATH
shopt -s histappend
shopt -s checkwinsize
PROMPT_COMMAND='history -a'
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)

case "$TERM" in
    xterm-color|screen-256color)
        color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] \$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*|screen*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac
[[ -e /etc/bash_completion.d/git ]] && . /etc/bash_completion.d/git && export PS1='$( __git_ps1 "(%s) " )'$PS1 
[[ $SHLVL > 1 ]]  && [[ "$SSH_AGENT_PID" ]]  && export PS1="** $PS1"
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
    . /etc/bash_completion.d/git 
fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi


git-extract-dir() {
    DIR=$1
    git filter-branch --subdirectory-filter ${DIR} HEAD -- --all --prune-empty 
    git reset --hard
    rm -rf .git/refs/original/
    git reflog expire --expire=now --all
    git gc --aggressive --prune=now
}

export HARNESS_OPTIONS=j1:c

stty -ixon  #turn off ctrl-s
function refresh_ssha() {
    if [[ -n $TMUX ]]; then
        NEW_SSH_AUTH_SOCK=$( tmux showenv|grep ^SSH_AUTH_SOCK|cut -d = -f 2 )
        if [[ -n $NEW_SSH_AUTH_SOCK ]] && [[ -S $NEW_SSH_AUTH_SOCK ]]; then 
            SSH_AUTH_SOCK=$NEW_SSH_AUTH_SOCK  
        fi
    fi
    ssh-add -l
}


copy_keys() {
    echo $1
    HOST=$1
    [[ "$HOST" ]] || ( echo "host is required." && return )
    cat $HOME/.ssh/authorized_keys* | sort -u | ssh $HOST 'tee -a ~/.ssh/authorized_keys'
}

curbranch() {
    cat $(__gitdir)/HEAD | perl -ne 'm/.*?(\w+$)/; print $1'
}


git_pager() {
    vim - -R -c 'set foldmethod=syntax' -c 'set syntax=git'
}

epoch() {
    date -d @$1 +"%F %T %z";
}

function commafy() {
    perl -W -pne 'chomp;s/\s+/,/g'
}

function HEAD() { adenosine HEAD "$@"; };
function OPTIONS() { adenosine OPTIONS "$@"; };
function GET() { adenosine GET "$@"; };
function POST() { adenosine POST "$@"; };
function PUT() { adenosine PUT "$@"; };
function DELETE() { adenosine DELETE "$@"; };
function TRACE() { adenosine TRACE "$@"; };


function plackdir() { 
    plackup -MPlack::App::Directory -e 'Plack::App::Directory->new({ root => "./" })->to_app' --port $1;
}


ec2-info() {
    IP=169.254.169.254
    ssh $1 "curl -q http://$IP/latest/meta-data/$2" 2>/dev/null
    echo -ne "\n"
}

[[ -e ~/.host_bashrc ]] && . ~/.host_bashrc
#devel local - https://metacpan.org/module/Devel::Local
which devel-local.sh && source $( which devel-local.sh )

function encrypt() {
    filename=$1;
    ( [[ "$filename" ]] || echo "filename required" && exit 2 );
    echo $filename;
    openssl enc -bf-cbc -out $filename.bf-cbc;
}
function decrypt() {
    openssl enc -bf-cbc -d;
}
function gmodified() {
numfiles=$( git ls-files -m 2>/dev/null | wc -l );
if [ $numfiles ];
then echo $numfiles'*'; fi;

}

#adapted from http://superuser.com/questions/565337/urxvt-settings-reload-without-restarting-terminal
function bash_colors() {
for code in {0..255}; do
    if [[ code%8 -eq 0 ]];then echo ;fi
        printf "%5s" `echo -n -e "\e[38;05;${code}m $code: Test"`
    done
}
#use my rcfile
alias pylint="pylint --rcfile=~/.pylintrc"

function ackip() {
    echo "ack '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b' $@" 1>&2
    ack '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b' $@
}

alias git_changed_files='git diff --name-only $( git merge-base --independent remotes/origin/master ) HEAD'

function updir() {
    perl -e "print join( '/' , ('..') x $1 )"
}
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"
